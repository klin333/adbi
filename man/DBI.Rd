% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Driver.R, R/Connection.R, R/Result.R,
%   R/ResultArrow.R, R/dbAppendTable_Connection_character_data.frame.R,
%   R/dbBegin_Connection.R, R/dbBind_Result.R, R/dbClearResult_Result.R,
%   R/dbClearResult_ResultArrow.R, R/dbColumnInfo_Result.R,
%   R/dbCommit_Connection.R, R/dbConnect_Driver.R, R/dbDataType_Connection.R,
%   R/dbDataType_Driver.R, R/dbDataType_Driver_list.R,
%   R/dbDisconnect_Connection.R, R/dbExistsTable_Connection_character.R,
%   R/dbFetchArrow_ResultArrow.R, R/dbFetch_Result.R, R/dbGetInfo_Connection.R,
%   R/dbGetInfo_Driver.R, R/dbGetInfo_Result.R, R/dbGetRowCount_Result.R,
%   R/dbGetRowsAffected_Result.R, R/dbGetStatement_Result.R,
%   R/dbHasCompleted_Result.R, R/dbIsValid_Connection.R, R/dbIsValid_Driver.R,
%   R/dbIsValid_Result.R, R/dbListFields_Connection_character.R,
%   R/dbListTables_Connection.R, R/dbQuoteIdentifier_Connection_character.R,
%   R/dbQuoteString_Connection_character.R,
%   R/dbRemoveTable_Connection_character.R, R/dbRollback_Connection.R,
%   R/dbSendQueryArrow_Connection.R, R/dbSendQuery_Connection_character.R,
%   R/dbSendStatement_Connection_character.R,
%   R/dbWriteTable_Connection_character_data.frame.R, R/show_Connection.R,
%   R/show_Driver.R, R/show_Result.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{AdbiDriver-class}
\alias{AdbiConnection-class}
\alias{KazamResult-class}
\alias{KazamResultArrow-class}
\alias{dbAppendTable_AdbiConnection}
\alias{dbAppendTable,AdbiConnection-method}
\alias{dbBegin_AdbiConnection}
\alias{dbBegin,AdbiConnection-method}
\alias{dbBind_KazamResult}
\alias{dbBind,KazamResult-method}
\alias{dbClearResult_KazamResult}
\alias{dbClearResult,KazamResult-method}
\alias{dbClearResult_KazamResultArrow}
\alias{dbClearResult,KazamResultArrow-method}
\alias{dbColumnInfo_KazamResult}
\alias{dbColumnInfo,KazamResult-method}
\alias{dbCommit_AdbiConnection}
\alias{dbCommit,AdbiConnection-method}
\alias{dbConnect_AdbiDriver}
\alias{dbConnect,AdbiDriver-method}
\alias{dbDataType_AdbiConnection}
\alias{dbDataType,AdbiConnection,ANY-method}
\alias{dbDataType_AdbiDriver}
\alias{dbDataType,AdbiDriver,ANY-method}
\alias{dbDataType_AdbiDriver_list}
\alias{dbDataType,AdbiDriver,list-method}
\alias{dbDisconnect_AdbiConnection}
\alias{dbDisconnect,AdbiConnection-method}
\alias{dbExistsTable_AdbiConnection_character}
\alias{dbExistsTable,AdbiConnection,character-method}
\alias{dbFetchArrow_KazamResultArrow}
\alias{dbFetchArrow,KazamResultArrow-method}
\alias{dbFetch_KazamResult}
\alias{dbFetch,KazamResult-method}
\alias{dbGetInfo_AdbiConnection}
\alias{dbGetInfo,AdbiConnection-method}
\alias{dbGetInfo_AdbiDriver}
\alias{dbGetInfo,AdbiDriver-method}
\alias{dbGetInfo_KazamResult}
\alias{dbGetInfo,KazamResult-method}
\alias{dbGetRowCount_KazamResult}
\alias{dbGetRowCount,KazamResult-method}
\alias{dbGetRowsAffected_KazamResult}
\alias{dbGetRowsAffected,KazamResult-method}
\alias{dbGetStatement_KazamResult}
\alias{dbGetStatement,KazamResult-method}
\alias{dbHasCompleted_KazamResult}
\alias{dbHasCompleted,KazamResult-method}
\alias{dbIsValid_AdbiConnection}
\alias{dbIsValid,AdbiConnection-method}
\alias{dbIsValid_AdbiDriver}
\alias{dbIsValid,AdbiDriver-method}
\alias{dbIsValid_KazamResult}
\alias{dbIsValid,KazamResult-method}
\alias{dbListFields_AdbiConnection_character}
\alias{dbListFields,AdbiConnection,character-method}
\alias{dbListTables_AdbiConnection}
\alias{dbListTables,AdbiConnection-method}
\alias{dbQuoteIdentifier_AdbiConnection_character}
\alias{dbQuoteIdentifier,AdbiConnection,character-method}
\alias{dbQuoteString_AdbiConnection_character}
\alias{dbQuoteString,AdbiConnection,character-method}
\alias{dbRemoveTable_AdbiConnection_character}
\alias{dbRemoveTable,AdbiConnection,character-method}
\alias{dbRollback_AdbiConnection}
\alias{dbRollback,AdbiConnection-method}
\alias{dbSendQueryArrow_AdbiConnection}
\alias{dbSendQueryArrow,AdbiConnection-method}
\alias{dbSendQuery_AdbiConnection_character}
\alias{dbSendQuery,AdbiConnection,character-method}
\alias{dbSendStatement_AdbiConnection_character}
\alias{dbSendStatement,AdbiConnection,character-method}
\alias{dbWriteTable_AdbiConnection_character_data.frame}
\alias{dbWriteTable,AdbiConnection,character,data.frame-method}
\alias{show_AdbiConnection}
\alias{show,AdbiConnection-method}
\alias{show_AdbiDriver}
\alias{show,AdbiDriver-method}
\alias{show_KazamResult}
\alias{show,KazamResult-method}
\title{DBI methods}
\usage{
\S4method{dbAppendTable}{AdbiConnection}(conn, name, value, ..., row.names = NULL)

\S4method{dbBegin}{AdbiConnection}(conn, ...)

\S4method{dbBind}{KazamResult}(res, params, ...)

\S4method{dbClearResult}{KazamResult}(res, ...)

\S4method{dbClearResult}{KazamResultArrow}(res, ...)

\S4method{dbColumnInfo}{KazamResult}(res, ...)

\S4method{dbCommit}{AdbiConnection}(conn, ...)

\S4method{dbConnect}{AdbiDriver}(drv, ...)

\S4method{dbDataType}{AdbiConnection,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{AdbiDriver,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{AdbiDriver,list}(dbObj, obj, ...)

\S4method{dbDisconnect}{AdbiConnection}(conn, ...)

\S4method{dbExistsTable}{AdbiConnection,character}(conn, name, ...)

\S4method{dbFetchArrow}{KazamResultArrow}(res, ...)

\S4method{dbFetch}{KazamResult}(res, n = -1, ...)

\S4method{dbGetInfo}{AdbiConnection}(dbObj, ...)

\S4method{dbGetInfo}{AdbiDriver}(dbObj, ...)

\S4method{dbGetInfo}{KazamResult}(dbObj, ...)

\S4method{dbGetRowCount}{KazamResult}(res, ...)

\S4method{dbGetRowsAffected}{KazamResult}(res, ...)

\S4method{dbGetStatement}{KazamResult}(res, ...)

\S4method{dbHasCompleted}{KazamResult}(res, ...)

\S4method{dbIsValid}{AdbiConnection}(dbObj, ...)

\S4method{dbIsValid}{AdbiDriver}(dbObj, ...)

\S4method{dbIsValid}{KazamResult}(dbObj, ...)

\S4method{dbListFields}{AdbiConnection,character}(conn, name, ...)

\S4method{dbListTables}{AdbiConnection}(conn, ...)

\S4method{dbQuoteIdentifier}{AdbiConnection,character}(conn, x, ...)

\S4method{dbQuoteString}{AdbiConnection,character}(conn, x, ...)

\S4method{dbRemoveTable}{AdbiConnection,character}(conn, name, ..., temporary = FALSE, fail_if_missing = TRUE)

\S4method{dbRollback}{AdbiConnection}(conn, ...)

\S4method{dbSendQueryArrow}{AdbiConnection}(conn, statement, ..., params = NULL)

\S4method{dbSendQuery}{AdbiConnection,character}(conn, statement, ..., params = NULL)

\S4method{dbSendStatement}{AdbiConnection,character}(conn, statement, ..., params = NULL)

\S4method{dbWriteTable}{AdbiConnection,character,data.frame}(
  conn,
  name,
  value,
  overwrite = FALSE,
  append = FALSE,
  ...,
  field.types = NULL,
  row.names = NULL,
  temporary = FALSE
)

\S4method{show}{AdbiConnection}(object)

\S4method{show}{AdbiDriver}(object)

\S4method{show}{KazamResult}(object)
}
\arguments{
\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{name}{The table name, passed on to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}. Options are:
\itemize{
\item a character string with the unquoted DBMS table name,
e.g. \code{"table_name"},
\item a call to \code{\link[DBI:Id]{Id()}} with components to the fully qualified table name,
e.g. \code{Id(schema = "my_schema", table = "table_name")}
\item a call to \code{\link[DBI:SQL]{SQL()}} with the quoted and fully qualified table name
given verbatim, e.g. \code{SQL('"my_schema"."table_name"')}
}}

\item{value}{For \code{dbWriteTable()}, a \link{data.frame} (or coercible to data.frame).
For \code{dbWriteTableArrow()}, an object coercible to an Arrow RecordBatchReader.}

\item{...}{Other parameters passed on to methods.}

\item{row.names}{A logical specifying whether the \code{row.names} should be
output to the output DBMS table; if \code{TRUE}, an extra field whose name
will be whatever the R identifier \code{"row.names"} maps to the DBMS (see
\code{\link[DBI:make.db.names]{DBI::make.db.names()}}). If \code{NA} will add rows names if
they are characters, otherwise will ignore.}

\item{res}{An object inheriting from \linkS4class{DBIResult}.}

\item{params}{A list of bindings, named or unnamed.}

\item{drv}{an object that inherits from \linkS4class{DBIDriver},
or an existing \linkS4class{DBIConnection}
object (in order to clone an existing connection).}

\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
or \linkS4class{DBIConnection}}

\item{obj}{An R object whose SQL type we want to determine.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{x}{A character vector, \link[DBI]{SQL} or \link[DBI]{Id} object to quote as identifier.}

\item{temporary}{a logical specifying whether the new table should be
temporary. Its default is \code{FALSE}.}

\item{fail_if_missing}{If \code{FALSE}, \code{dbRemoveTable()} succeeds if the
table doesn't exist.}

\item{statement}{a character string containing SQL.}

\item{overwrite}{Allow overwriting the destination table. Cannot be
\code{TRUE} if \code{append} is also \code{TRUE}.}

\item{append}{Allow appending to the destination table. Cannot be
\code{TRUE} if \code{overwrite} is also \code{TRUE}.}

\item{field.types}{character vector of named  SQL field types where
the names are the names of new table's columns. If missing, types inferred
with \code{\link[DBI:dbDataType]{DBI::dbDataType()}}).}

\item{object}{Any R object}
}
\description{
Implementations of pure virtual functions defined in the \code{DBI} package.
}
