% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbFetch_AdbiResult.R
\name{dbFetch_AdbiResult}
\alias{dbFetch_AdbiResult}
\alias{dbFetch,AdbiResult-method}
\title{Fetch result setss}
\usage{
\S4method{dbFetch}{AdbiResult}(res, n = -1, ...)
}
\arguments{
\item{res}{An object inheriting from \linkS4class{DBIResult}, created by
\code{\link[DBI:dbSendQuery]{dbSendQuery()}}.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{...}{Other arguments passed on to methods.}
}
\description{
When fetching results using \code{\link[=dbFetch]{dbFetch()}}, the argument \code{n} can be specified
to control chunk size per fetching operation. The default value of \code{-1}
corresonds to retrieving the entire result set at once, while a positive
integer will try returning as many rows (as long as \code{n} does not exceed the
available number of rows), in line with standard DBI expectations. As data
transfer is mediated by Arrow data structures, which are retrieved as array
chunks, the underlying chunk size can be used by passing an \code{n} value \code{NA}.
As this behavior currently is not supported by DBItest, it is opt-in and
has to be enables by setting \code{options(adbi.allow_na_fetch = TRUE)}.
}
\examples{
if (requireNamespace("adbcsqlite")) {
  library(DBI)
  con <- dbConnect(adbi::adbi("adbcsqlite"), uri = ":memory:")
  dbWriteTable(con, "swiss", swiss)
  res <- dbSendQuery(con, "SELECT * from swiss WHERE Agriculture < 30")
  dbFetch(res)
  dbClearResult(res)
  dbDisconnect(con)
}
}
